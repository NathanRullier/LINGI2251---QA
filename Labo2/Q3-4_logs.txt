added 

line 52
assert(pthread_mutex_lock(&lock) == 0);

line 61-65
assert(pthread_mutex_unlock(&lock) == 0);


Reason:
Put method can have two concurrent accesses where they don't register inuse=1 and overwrite one of them!






valgrind --tool=helgrind ./a.out 2
==23252== Helgrind, a thread error detector
==23252== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==23252== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==23252== Command: ./a.out 2
==23252== 
==23252== ---Thread-Announcement------------------------------------------
==23252== 
==23252== Thread #3 was created
==23252==    at 0x499C692: clone (in /usr/lib64/libc-2.30.so)
==23252==    by 0x488139B: create_thread (in /usr/lib64/libpthread-2.30.so)
==23252==    by 0x4882D0C: pthread_create@@GLIBC_2.2.5 (in /usr/lib64/libpthread-2.30.so)
==23252==    by 0x4840378: pthread_create_WRK (hg_intercepts.c:427)
==23252==    by 0x4841473: pthread_create@* (hg_intercepts.c:460)
==23252==    by 0x401801: main (bht.c:134)
==23252== 
==23252== ---Thread-Announcement------------------------------------------
==23252== 
==23252== Thread #2 was created
==23252==    at 0x499C692: clone (in /usr/lib64/libc-2.30.so)
==23252==    by 0x488139B: create_thread (in /usr/lib64/libpthread-2.30.so)
==23252==    by 0x4882D0C: pthread_create@@GLIBC_2.2.5 (in /usr/lib64/libpthread-2.30.so)
==23252==    by 0x4840378: pthread_create_WRK (hg_intercepts.c:427)
==23252==    by 0x4841473: pthread_create@* (hg_intercepts.c:460)
==23252==    by 0x401801: main (bht.c:134)
==23252== 
==23252== ----------------------------------------------------------------
==23252== 
==23252== Possible data race during read of size 4 at 0x1AE7708 by thread #3
==23252== Locks held: none
==23252==    at 0x4013B2: put (bht.c:56)
==23252==    by 0x4015F1: put_thread (bht.c:88)
==23252==    by 0x484056C: mythread_wrapper (hg_intercepts.c:389)
==23252==    by 0x48824E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==23252==    by 0x499C6A2: clone (in /usr/lib64/libc-2.30.so)
==23252== 
==23252== This conflicts with a previous write of size 4 by thread #2
==23252== Locks held: none
==23252==    at 0x401443: put (bht.c:59)
==23252==    by 0x4015F1: put_thread (bht.c:88)
==23252==    by 0x484056C: mythread_wrapper (hg_intercepts.c:389)
==23252==    by 0x48824E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==23252==    by 0x499C6A2: clone (in /usr/lib64/libc-2.30.so)
==23252==  Address 0x1ae7708 is 24000008 bytes inside data symbol "table"
==23252== 
==23252== 
==23252== More than 10000000 total errors detected.  I'm not reporting any more.
==23252== Final error counts will be inaccurate.  Go fix your program!
==23252== Rerun with --error-limit=no to disable this cutoff.  Note
==23252== that errors may occur in your program without prior warning from
==23252== Valgrind, because errors are no longer being displayed.
==23252== 
